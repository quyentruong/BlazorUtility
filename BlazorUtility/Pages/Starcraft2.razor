@page "/starcraft2"

<PageTitle>Starcraft 2 Utility</PageTitle>
<h2>Starcraft 2 Utility</h2>
<h3>Attack Speed Calculator</h3>
<MudText>Green is good number and red is bad number after calculating.</MudText>
<MudText>Attack Speed aura and Strike Weaponry after 25 minutes are addictive to attack speed. Each Level increases 10%.</MudText>
<MudText>Ex: Aura Attack Speed 15%, Strike Weaponry 20%. Total is 35%</MudText>
<MudText>Ability to increase Attack Speed is multiplicative only.</MudText>
<MudGrid>
    <MudItem xs="6" sm="3">
        <MudNumericField Margin="Margin.Dense" DebounceInterval="500" MaxLength="6" Min="0" Max="99999" Step="0.01" AdornmentIcon="@CustomIcons.Filled.Sword" Adornment="Adornment.Start" @bind-Value="CurrentAttackSpeed" HelperText="Current Attack Speed" />
    </MudItem>
    <MudItem xs="6" sm="3">
        <MudTextField Style="@UpdateStyle()" Margin="Margin.Dense" MaxLength="5" Disabled @bind-Value="AttackSpeedResult.Diff" HelperText="@AttackSpeedResult.ChangeStr" />
     </MudItem>
     <MudItem xs="6" sm="3">
         <MudTextField Style="@UpdateStyle()" Margin="Margin.Dense" MaxLength="5" Disabled AdornmentIcon="@CustomIcons.Filled.Sword" Adornment="Adornment.Start" @bind-Value="AttackSpeedResult.NewAttackSpeed" HelperText="New Attack Speed" />
     </MudItem>
     <MudItem xs="6" sm="3">
         <MudTextField Style="@UpdateStyle()" Margin="Margin.Dense" MaxLength="5" Disabled Adornment="Adornment.End" AdornmentText="%" AdornmentColor="Color.Info" @bind-Value="AttackSpeedResult.ChangePercent" HelperText="@AttackSpeedResult.ChangeStr" />
     </MudItem>
 </MudGrid>
 <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="AddAttackSpeedEffectField"></MudIconButton>
 @* <MudIconButton Icon="@CustomIcons.Filled.Minus" Color="Color.Primary" OnClick="RemoveAttackSpeedEffectField"></MudIconButton> *@
 @foreach (var attackSpeedEffect in AttackSpeedEffects)
{
    <MudGrid>
        <MudItem xs="2" sm="3" lg="1">
            <MudToggleIconButton @bind-Toggled="attackSpeedEffect.Toggle"
                                 Icon="@Icons.Material.Filled.ArrowDownward" Color="@Color.Error" Title="Debuff"
                                 ToggledIcon="@Icons.Material.Filled.ArrowUpward" ToggledColor="@Color.Success" ToggledTitle="Buff" />

        </MudItem>
        <MudItem xs="4" sm="2" Style="margin-top:-15px">
            <MudNumericField DebounceInterval="500" MaxLength="3" Min="0" Max="999" @bind-Value="@attackSpeedEffect.Value" Adornment="Adornment.End" AdornmentText="%" AdornmentColor="Color.Info" />
        </MudItem>
        <MudItem xs="3" sm="1" Style="margin-top:-15px">
            <MudNumericField DebounceInterval="500" MaxLength="3" @bind-Value="attackSpeedEffect.Stack" HelperText="Stack" Variant="Variant.Text" Min="0" Max="999" />
        </MudItem>
        <MudItem xs="1">
            <MudIconButton Icon="@CustomIcons.Filled.Minus" Color="Color.Error" OnClick="@(()=>RemoveAttackSpeedEffectField(attackSpeedEffect))"></MudIconButton>
        </MudItem>

    </MudGrid>
}
<br />
<br />
<h3>Cooldown Rate Calculator</h3>
<MudGrid>
    <MudItem xs="6" sm="3">
        <MudNumericField Margin="Margin.Dense" DebounceInterval="500" MaxLength="5" Min="0" Max="999" @bind-Value="CurrentCooldown" HelperText="Current Cooldown" Adornment="Adornment.End" AdornmentText="s" AdornmentColor="Color.Info" />
    </MudItem>
    <MudItem xs="6" sm="3">
        <MudTextField Margin="Margin.Dense" MaxLength="5" Disabled @bind-Value="CooldownResult.Diff" HelperText="@CooldownResult.ChangeStr" Adornment="Adornment.End" AdornmentText="s" AdornmentColor="Color.Info" />
     </MudItem>
     <MudItem xs="6" sm="3">
         <MudTextField Margin="Margin.Dense" MaxLength="5" Disabled @bind-Value="CooldownResult.NewCooldown" HelperText="New Cooldown" Adornment="Adornment.End" AdornmentText="s" AdornmentColor="Color.Info" />
     </MudItem>
     <MudItem xs="6" sm="3">
         <MudTextField Margin="Margin.Dense" MaxLength="5" Disabled Adornment="Adornment.End" AdornmentText="%" AdornmentColor="Color.Info" @bind-Value="CooldownResult.ChangePercent" HelperText="@CooldownResult.ChangeStr" />
     </MudItem>
 </MudGrid>
 <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="AddCooldownEffectField"></MudIconButton>

 @foreach (var cooldownEffect in CooldownEffects)
{
    <MudGrid>
        <MudItem xs="2" sm="3" lg="1">
            <MudToggleIconButton @bind-Toggled="cooldownEffect.Toggle"
                                 Icon="@Icons.Material.Filled.ArrowDownward" Color="@Color.Error" Title="Debuff"
                                 ToggledIcon="@Icons.Material.Filled.ArrowUpward" ToggledColor="@Color.Success" ToggledTitle="Buff" />

        </MudItem>
        <MudItem xs="4" sm="2" Style="margin-top:-15px">
            <MudNumericField DebounceInterval="500" MaxLength="5" Min="0" Max="999" @bind-Value="@cooldownEffect.Value" Adornment="Adornment.End" AdornmentText="%" AdornmentColor="Color.Info" />
        </MudItem>
        <MudItem xs="3" sm="1" Style="margin-top:-15px">
            <MudNumericField DebounceInterval="500" MaxLength="3" @bind-Value="cooldownEffect.Stack" HelperText="Stack" Variant="Variant.Text" Min="0" Max="999" />
        </MudItem>
        <MudItem xs="1">
            <MudIconButton Icon="@CustomIcons.Filled.Minus" Color="Color.Error" OnClick="@(()=>RemoveCooldownEffectField(cooldownEffect))"></MudIconButton>
        </MudItem>
    </MudGrid>
}
@code {
    private static (double NewAttackSpeed, double Diff, double ChangePercent, string ChangeStr) AttackSpeedResult = (0, 0, 0, "");
    private static (double NewCooldown, double Diff, double ChangePercent, string ChangeStr) CooldownResult = (0, 0, 0, "");
    private static double _currentAttackSpeed = 0;
    protected static double CurrentAttackSpeed
    {
        get => _currentAttackSpeed;
        set
        {
            _currentAttackSpeed = Math.Round(value, 2);
            AttackSpeedResult = AttackSpeedCalculate();
        }
    }

    private static double _currentCooldown = 0;
    protected static double CurrentCooldown
    {
        get => _currentCooldown;
        set
        {
            _currentCooldown = value;
            CooldownResult = CooldownCalculate();
        }
    }

    public static List<EffectData> AttackSpeedEffects { get; set; } = new();
    private void AddAttackSpeedEffectField()
    {
        AttackSpeedEffects.Add(new EffectData());
    }

    private void RemoveAttackSpeedEffectField(EffectData effectData)
    {
        if (AttackSpeedEffects.Count > 0)
        {
            AttackSpeedEffects.Remove(effectData);
            AttackSpeedResult = AttackSpeedCalculate();
        }
    }

    public static List<EffectData> CooldownEffects { get; set; } = new();
    private void AddCooldownEffectField()
    {
        CooldownEffects.Add(new EffectData());
    }

    private void RemoveCooldownEffectField(EffectData effectData)
    {
        if (CooldownEffects.Count > 0)
        {
            CooldownEffects.Remove(effectData);
            CooldownResult = CooldownCalculate();
        }
    }

    private string UpdateStyle()
    {
        return @AttackSpeedResult.ChangeStr.Equals("Increase") ? "color: rgba(244,67,54,1)" : "color: rgba(0,200,83,1)";
    }

    private static (double, double, double, string) AttackSpeedCalculate()
    {
        var effectResult = 1d;
        foreach (var attackSpeedEffect in AttackSpeedEffects)
        {
            var value = attackSpeedEffect.Value / 100d;
            var effect = attackSpeedEffect.Toggle ? value : value * -1;
            effectResult *= Math.Pow(1 + effect, attackSpeedEffect.Stack);
        }
        var newAttackSpeed = CurrentAttackSpeed / effectResult;
        var diff = Math.Round(newAttackSpeed - CurrentAttackSpeed, 2);

        var changePercent = CurrentAttackSpeed > 0 ? Math.Round(100 * diff / CurrentAttackSpeed, 2) : 0;
        var changeStr = diff > 0 ? "Increase" : "Decrease";
        return (Math.Round(newAttackSpeed, 2), Math.Abs(diff), Math.Abs(changePercent), changeStr);
    }

    private static (double, double, double, string) CooldownCalculate()
    {
        var effectResult = 0d;
        foreach (var cooldownEffect in CooldownEffects)
        {
            var value = cooldownEffect.Value / 100d;
            var effect = cooldownEffect.Toggle ? value : value * -1;
            effectResult += effect * cooldownEffect.Stack;
        }
        var newCooldown = Math.Round(CurrentCooldown / (1 + effectResult), 2);
        var diff = Math.Round(newCooldown - CurrentCooldown, 2);

        var changePercent = CurrentCooldown > 0 ? Math.Round(100 * diff / CurrentCooldown, 2) : 0;
        var changeStr = diff > 0 ? "Increase" : "Decrease";
        return (newCooldown, Math.Abs(diff), Math.Abs(changePercent), changeStr);
    }

    public class EffectData
    {
        private double _value { get; set; }
        public double Value
        {
            get => _value;
            set
            {
                _value = value;
                AttackSpeedResult = AttackSpeedCalculate();
                CooldownResult = CooldownCalculate();
            }
        }

        private bool _toggle { get; set; } = true;
        public bool Toggle
        {
            get => _toggle;
            set
            {
                _toggle = value;
                AttackSpeedResult = AttackSpeedCalculate();
                CooldownResult = CooldownCalculate();
            }
        }
        private int _stack { get; set; } = 1;
        public int Stack
        {
            get => _stack;
            set
            {
                _stack = value;
                AttackSpeedResult = AttackSpeedCalculate();
                CooldownResult = CooldownCalculate();
            }
        }
    }
}